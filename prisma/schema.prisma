
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Auth Models

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String?    @unique
  emailVerified Boolean  @default(true)
  image          String?
  password       String?    // hashed lozinka (Better Auth ga automatski popunjava kod email/password registra)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  accounts       Account[]
  sessions       Session[]
   orders    Order[]
  designs   Design[]
  verificationTokens VerificationToken[]

  @@map("users")
}


model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Product Models

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  images      String[]
  categoryId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  orderItems OrderItem[]

  @@map("products")
}

// Order Models

model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  user    User        @relation(fields: [userId], references: [id])
  items   OrderItem[]
  designs Design[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Design Models

model Design {
  id           String     @id @default(cuid())
  userId       String
  orderId      String?
  name         String
  type         DesignType
  fileUrl      String
  thumbnailUrl String?
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  user  User   @relation(fields: [userId], references: [id])
  order Order? @relation(fields: [orderId], references: [id])

  @@map("designs")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum DesignType {
  ENGRAVING
  CNC
  PRINT_3D
  WEDDING
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
// Verification Token
// ==================
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  user   User?   @relation(fields: [identifier], references: [email])
  @@map("verification_tokens")
}